## Define in ENV variables
# ${BEEHIVE_HOST}
###

## Configuration
client_max_body_size 0;
proxy_buffering off;
proxy_request_buffering off;

## Mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# If header is present, it's a feed. In that case don't cache.
# If header is not present, don't change anything.
map $upstream_http_swarm_feed_index $download_cache_control_selector {
	""			$upstream_http_cache_control;
	default		"no-cache";
}

## Server
server {
	listen 1633;
	server_name internal-beenode-lb;
	resolver 127.0.0.11;
	
	#config
	proxy_http_version 1.1;
	proxy_read_timeout 600s;
	proxy_set_header Connection "upgrade";
	proxy_set_header Host $host;
	proxy_set_header Upgrade $http_upgrade;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Host $host;
	proxy_set_header X-Forwarded-Proto $scheme;

	### API instructions
	## Download APIs
	# LB logic is implemented in BeehiveManager LoadBalancerController
	## Upload APIs
	# Require to identify the node owning the specific swarm-postage-batch-id reported in header

	#bytes upload (POST)
	location ~ "^(/v1)?/bytes$" {
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last;
		}
	}

	#bytes download (GET)
	location ~ "^(/v1)?/bytes/(?<identifier>[A-Fa-f0-9]{64}|[A-Fa-f0-9]{128}|[A-Za-z0-9]+\.[A-Za-z0-9]+)$" {
		set $content_identifier ${identifier};

		if ($request_method = GET) {
			rewrite ^ /rewrite_download_cached$uri last;
		}
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
	}

	#bzz upload (POST)
	location ~ "^(/v1)?/bzz$" {
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last;
		}
	}

	#bzz download (GET)
	location ~ "^(/v1)?/bzz/(?<identifier>[A-Fa-f0-9]{64}|[A-Fa-f0-9]{128}|[A-Za-z0-9]+\.[A-Za-z0-9]+)(/\S*)?$" {
		set $content_identifier ${identifier};

		if ($request_method = GET) {
			rewrite ^ /rewrite_download_cached$uri last;
		}
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
	}

	#chunks upload single (POST)
	location ~ "^(/v1)?/chunks$" {
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last;
		}
	}

	#chunks upload stream (GET)
	location ~ "^(/v1)?/chunks/stream$" {
		if ($request_method = GET) {
			rewrite ^ /rewrite_upload_websocket$uri last;
		}
	}
	
	location ~ "^(/v1)?/chunks/stream-turbo$" {
		if ($request_method = GET) {
			rewrite ^ /rewrite_upload_websocket$uri last;
		}
	}

	#chunks download (GET)
	location ~ "^(/v1)?/chunks/(?<identifier>[A-Fa-f0-9]{64}|[A-Fa-f0-9]{128}|[A-Za-z0-9]+\.[A-Za-z0-9]+)$" {
        #take rootHash if present as identifier for routing
        if ($arg_rootHash) {
            set $content_identifier $arg_rootHash;
        }
        if ($arg_rootHash = "") {
		    set $content_identifier ${identifier};
        }

		if ($request_method = GET) {
			rewrite ^ /rewrite_download_cached$uri last;
		}
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
	}

	#feed create root (GET|POST)
	location ~ "^(/v1)?/feeds/[A-Fa-f0-9]{40}/[A-Fa-f0-9]+$" {
		if ($request_method = GET) {
			rewrite ^ /rewrite_download_not_cached$uri last;
		}
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last;
		}
	}

	#pss send (POST)
	location ~ "^(/v1)?/pss/send/\w+/[0-9a-fA-F]{1,6}(,[0-9a-fA-F]{1,6})*$" {
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last;
		}
	}

	#soc upload (POST)
	location ~ "^(/v1)?/soc/[A-Fa-f0-9]{40}/[A-Fa-f0-9]+$" {
		if ($request_method = OPTIONS) {
			rewrite ^ /rewrite_options$uri last;
		}
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last;
		}
	}

	#tags (POST)
	location ~ "^(/v1)?/tags" {
		if ($request_method = POST) {
			rewrite ^ /rewrite_upload$uri last; #use upload because of postageBatchId requirement
		}
	}

	## Internal api behavior location handler
	# Implement different api behaviors.
	####
	location /rewrite_download_cached {
		internal;
		rewrite ^/rewrite_download_cached(?<realurl>/.*)$ $realurl break;
		
		auth_request /fetch_upstream_bee_node_to_download_content;

		auth_request_set $bee_scheme $upstream_http_bee_node_scheme;
		auth_request_set $bee_hostname $upstream_http_bee_node_hostname;
		auth_request_set $bee_gateway_port $upstream_http_bee_node_gateway_port;

		add_header Cache-Control $download_cache_control_selector; #it still could be a feed

		proxy_pass "${bee_scheme}://${bee_hostname}:${bee_gateway_port}";
	}

	location /rewrite_download_not_cached {
		internal;
		rewrite ^/rewrite_download_not_cached(?<realurl>/.*)$ $realurl break;

		add_header Cache-Control no-cache;
		
		auth_request /fetch_upstream_bee_node_healthy;

		auth_request_set $bee_scheme $upstream_http_bee_node_scheme;
		auth_request_set $bee_hostname $upstream_http_bee_node_hostname;
		auth_request_set $bee_gateway_port $upstream_http_bee_node_gateway_port;

		proxy_pass "${bee_scheme}://${bee_hostname}:${bee_gateway_port}";
	}

	location /rewrite_options {
		internal;
		rewrite ^/rewrite_options(?<realurl>/.*)$ $realurl break;
		
		auth_request /fetch_upstream_bee_node_healthy;

		auth_request_set $bee_scheme $upstream_http_bee_node_scheme;
		auth_request_set $bee_hostname $upstream_http_bee_node_hostname;
		auth_request_set $bee_gateway_port $upstream_http_bee_node_gateway_port;

		proxy_pass "${bee_scheme}://${bee_hostname}:${bee_gateway_port}";
	}

	location /rewrite_upload {
		internal;
		rewrite ^/rewrite_upload(?<realurl>/.*)$ $realurl break;
		
		auth_request /fetch_upstream_bee_node_by_postage_batch_id;

		auth_request_set $bee_scheme $upstream_http_bee_node_scheme;
		auth_request_set $bee_hostname $upstream_http_bee_node_hostname;
		auth_request_set $bee_gateway_port $upstream_http_bee_node_gateway_port;

		proxy_pass "${bee_scheme}://${bee_hostname}:${bee_gateway_port}";
	}

	location /rewrite_upload_websocket {
		internal;
		rewrite ^/rewrite_upload_websocket(?<realurl>/.*)$ $realurl break;
		
		auth_request /fetch_upstream_bee_node_by_postage_batch_id;

		auth_request_set $bee_scheme $upstream_http_bee_node_scheme;
		auth_request_set $bee_hostname $upstream_http_bee_node_hostname;
		auth_request_set $bee_gateway_port $upstream_http_bee_node_gateway_port;
		
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

		proxy_pass "${bee_scheme}://${bee_hostname}:${bee_gateway_port}";
	}

	## Internal "auth_request" workaround
	# Nginx requires some hacky workaround for select upstream based on external async calls.
	# See: https://github.com/nginx/njs-examples#setting-nginx-var-as-a-result-of-async-operation
	####

	location /fetch_upstream_bee_node_by_postage_batch_id {
		internal;

		proxy_method GET;
		proxy_pass http://${BEEHIVE_HOST}/api/v0.3/LoadBalancer/batch/${http_swarm_postage_batch_id};
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";
		proxy_set_header Content-Type "";
		proxy_set_header X-Original-URI $request_uri;
	}

	location /fetch_upstream_bee_node_healthy {
		internal;

		proxy_method GET;
		proxy_pass http://${BEEHIVE_HOST}/api/v0.3/LoadBalancer;
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";
		proxy_set_header Content-Type "";
		proxy_set_header X-Original-URI $request_uri;
	}

	location /fetch_upstream_bee_node_to_download_content {
		internal;

		proxy_method GET;
		proxy_pass http://${BEEHIVE_HOST}/api/v0.3/LoadBalancer/download/${content_identifier};
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";
		proxy_set_header Content-Type "";
		proxy_set_header X-Original-URI $request_uri;
	}

	## Cacth-all
	# Return "403 Forbidden" for all other unlisted APIs
	####
	location / {
		return 403;
	}
}